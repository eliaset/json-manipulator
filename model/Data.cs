// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using model;
//
//    var medition = Medition.FromJson(jsonString);

namespace model
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class HUDMedition
    {
        [JsonProperty("greeting")]
        public string Greeting { get; set; }

        [JsonProperty("meditions")]
        public List<Medition> meditions { get; set; }
    }

    public partial class Medition
    {
        [JsonProperty("fecha")]
        public string Fecha { get; set; }

        [JsonProperty("autoridad_ambiental")]
        public string AutoridadAmbiental { get; set; }

        [JsonProperty("nombre_de_la_estaci_n")]
        public string NombreDeLaEstaciN { get; set; }

        [JsonProperty("tecnolog_a")]
        public string TecnologA { get; set; }

        [JsonProperty("latitud")]
        public string Latitud { get; set; }

        [JsonProperty("longitud")]
        public string Longitud { get; set; }

        [JsonProperty("c_digo_del_departamento")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long CDigoDelDepartamento { get; set; }

        [JsonProperty("departamento")]
        public string Departamento { get; set; }

        [JsonProperty("c_digo_del_municipio")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long CDigoDelMunicipio { get; set; }

        [JsonProperty("nombre_del_municipio")]
        public string NombreDelMunicipio { get; set; }

        [JsonProperty("tipo_de_estaci_n")]
        public string TipoDeEstaciN { get; set; }

        [JsonProperty("tiempo_de_exposici_n")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long TiempoDeExposiciN { get; set; }

        [JsonProperty("variable")]
        public string Variable { get; set; }

        [JsonProperty("unidades")]
        public string Unidades { get; set; }

        [JsonProperty("concentraci_n")]
        public string ConcentraciN { get; set; }

        [JsonProperty("geocoded_column")]
        public GeocodedColumn GeocodedColumn { get; set; }
    }

    public partial class GeocodedColumn
    {
        [JsonProperty("latitude")]
        public string Latitude { get; set; }

        [JsonProperty("longitude")]
        public string Longitude { get; set; }
    }

    public partial class Medition
    {
        public static Medition FromJson(string json) => JsonConvert.DeserializeObject<Medition>(json, model.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Medition self) => JsonConvert.SerializeObject(self, model.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }















}

